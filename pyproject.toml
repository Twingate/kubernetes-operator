[tool.poetry]
name = "twingate-operator"
version = "0.1.2"
description = ""
authors = ["Eran Kampf <eran@twingate.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
kopf = "^1.36.2"
pydantic = "^2.4.2"
gql = {version = "~=3.4.1", extras = ["requests"]}
tenacity = "^8.2.3"
orjson = "^3.9.10"
requests = "^2.31.0"
pydantic-settings = "^2.0.3"
kubernetes = "^28.1.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
bandit = "^1.7.5"
mypy = "^1.7.0"
black = "^23.11.0"
isort = "^5.12.0"
autoflake = "^2.2.1"
pyupgrade = "^3.15.0"
coveralls = "^3.3.1"
pytest = "^7.4.3"
ruff = "^0.1.5"
pytest-cov = "^4.1.0"
responses = "^0.24.0"
types-requests = "^2.31.0.6"
factory-boy = "^3.3.0"
pytest-sugar = "^0.9.7"
syrupy = "^4.6.0"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
python-semantic-release = "^8.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

[tool.bandit]
targets = ["app"]
recursive = true
exclude = ["tests"]

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

[tool.black]
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true
combine_star = true
remove_redundant_aliases = true
color_output = true

[tool.mypy]
plugins = ["pydantic.mypy"]
allow_redefinition = false
check_untyped_defs = false
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
no_implicit_reexport = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


exclude = [
    "/tests",
]

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration",
]

[tool.ruff]
select = [
    "D",
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "S", # flake8-bandit
    "Q", # flake8-quotes
    "G", # flake8-logging-format
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    "FBT", # flake8-boolean-trap
    "PERF", # Perflint
    "PT", # flake8-pytest-style
    "PIE", # flake8-pie
    "RSE", # flake8-raise
]
ignore = [
    "E501", # line-too-long

    # D100: Missing docstring in public module
    # D101: Missing docstring in public class
    # D102: Missing docstring in public method
    # D103: Missing docstring in public function
    # D104: Missing docstring in public package
    # D105: Missing docstring in magic method
    # D106: Missing docstring in public nested class
    # D107: Missing docstring in __init__
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
]

[tool.ruff.per-file-ignores]
"*/tests/*" = [
    "S101", # Use of `assert` detected
]
"tests_integration/**/*" = [
    "S101", # Use of `assert` detected
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.semantic_release]
version_toml = [
    "pyproject.toml:tool.poetry.version",
]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "Bumps*"
]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "chore", "build"]
