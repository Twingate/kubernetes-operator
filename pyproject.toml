[tool.poetry]
name = "twingate-operator"
version = "0.11.3"
description = ""
authors = ["Eran Kampf <eran@twingate.com>"]
readme = "README.md"
# package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
croniter = "^2.0.5"
google-cloud-artifact-registry = "^1.11.3"
gql = {version = "~=3.5.0", extras = ["requests"]}
kopf = "^1.37.2"
kubernetes = "^30.1.0"
orjson = "^3.10.3"
pendulum = "^3.0.0"
pydantic = "^2.7.3"
pydantic-settings = "^2.3.1"
requests = "^2.32.3"
semantic-version = "^2.10.0"
tenacity = "^8.3.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
autoflake = "^2.3.1"
bandit = "^1.7.8"
coveralls = "^3.3.1"
factory-boy = "^3.3.0"
isort = "^5.13.2"
mypy = "^1.10.0"
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-datadir = "^1.5.0"
pytest-factoryboy = "^2.7.0"
pytest-freezegun = "^0.4.2"
pytest-randomly = "^3.15.0"
pytest-sugar = "^1.0.0"
pyupgrade = "^3.15.2"
responses = "^0.25.2"
ruff = "^0.4.8"
syrupy = "^4.6.1"
types-croniter = "^2.0.0.20240423"
types-requests = "^2.32.0.20240602"
[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
python-semantic-release = "^9.8.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

[tool.bandit]
targets = ["app"]
recursive = true
exclude = ["tests"]

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true
combine_star = true
remove_redundant_aliases = true
color_output = true

[tool.mypy]
plugins = ["pydantic.mypy"]
allow_redefinition = false
check_untyped_defs = false
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
no_implicit_reexport = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

exclude = [
    "/tests",
]

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration",
]

[tool.ruff.lint]
select = [
    "D",
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "S", # flake8-bandit
    "Q", # flake8-quotes
    "G", # flake8-logging-format
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    "FBT", # flake8-boolean-trap
    "PERF", # Perflint
    "PT", # flake8-pytest-style
    "PIE", # flake8-pie
    "RSE", # flake8-raise
    "YTT", # flake8-2020
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat,
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ERA", # eradicate
    "FLY", # flynt
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501", # line-too-long

    # D100: Missing docstring in public module
    # D101: Missing docstring in public class
    # D102: Missing docstring in public method
    # D103: Missing docstring in public function
    # D104: Missing docstring in public package
    # D105: Missing docstring in magic method
    # D106: Missing docstring in public nested class
    # D107: Missing docstring in __init__
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
]

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = [
    "S101", # Use of `assert` detected
    "S106", # Possible hardcoded password assigned to argument
]
"tests_integration/**/*" = [
    "S101", # Use of `assert` detected
    "S106", # Possible hardcoded password assigned to argument
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.semantic_release]
version_toml = [
    "pyproject.toml:tool.poetry.version",
]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore: Bumps*",
    "Co-authored-by:*"
]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "chore", "build"]
